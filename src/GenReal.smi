_require "basis.smi"
_require "GEN_TYPES.sml"
_require "PREGEN_SIG.sml"
_require "PRETEXT_GENERATOR.sml"
_require "TEXT_GENERATOR.sml"
_require "REAL_GENERATOR.sml"

functor GenReal
  (S : sig
    (* GEN_TYPES *)
    type rand
    type 'a gen = rand -> 'a * rand
    type ('a, 'b) co = 'a -> 'b gen -> 'b gen
    (* PREGEN_SIG *)
    val new : unit -> rand
    val range : int * int -> rand -> int * rand
    type ('a, 'b) reader = 'b -> ('a * 'b) option

    val lift : 'a -> 'a gen
    val select : 'a vector -> 'a gen
    val choose : 'a gen vector -> 'a gen
    val choose' : (int * 'a gen) vector -> 'a gen
    val selectL : 'a list -> 'a gen
    val chooseL : 'a gen list -> 'a gen
    val chooseL' : (int * 'a gen) list -> 'a gen
    val filter : ('a -> bool) -> 'a gen -> 'a gen
    val zip : ('a gen * 'b gen) -> ('a * 'b) gen
    val zip3 : ('a gen * 'b gen * 'c gen) -> ('a * 'b * 'c) gen
    val zip4 : ('a gen * 'b gen * 'c gen * 'd gen) -> ('a * 'b * 'c * 'd) gen

    val map  : ('a -> 'b) -> 'a gen -> 'b gen
    val map2 : ('a * 'b -> 'c) -> ('a gen * 'b gen) -> 'c gen
    val map3 : ('a * 'b * 'c -> 'd) -> ('a gen * 'b gen * 'c gen) -> 'd gen
    val map4 : ('a * 'b * 'c * 'd -> 'e) -> ('a gen * 'b gen * 'c gen * 'd gen) -> 'e gen

    val flip : bool gen
    val flip' : int * int -> bool gen

    val list : bool gen -> 'a gen -> 'a list gen
    val option : bool gen -> 'a gen -> 'a option gen
    val vector : (int * (int -> 'a) -> 'b) -> int gen * 'a gen -> 'b gen
    val variant : (int,'b) co
    val variant' : (int * int,'b) co
    val arrow : ('a, 'b) co * 'b gen -> ('a -> 'b) gen
    val cobool : (bool, 'b) co
    val colist : ('a, 'b) co -> ('a list, 'b) co
    val coopt : ('a, 'b) co -> ('a option, 'b) co

    type stream
    val start : rand -> stream
    val limit' :  int -> 'a gen -> ('a, stream) reader
    val limit :  'a gen -> ('a, stream) reader

    (* TEXT_GENERATOR *)
    type char = char
    type string = string
    type substring = substring
    val char : char gen

	val charRange : char * char -> char gen
	val charFrom : string -> char gen
	val charByType : (char -> bool) -> char gen
	val string : (int gen * char gen) -> string gen
	val substring : string gen -> substring gen
	val cochar : (char, 'b) co
	val costring : (string, 'b) co
	val cosubstring : (substring, 'b) co

    (* REAL *)
    structure Real :
    sig
      type real
      val != : real * real -> bool
      val * : real * real -> real
      val *+ : real * real * real -> real
      val *- : real * real * real -> real
      val + : real * real -> real
      val - : real * real -> real
      val / : real * real -> real
      val < : real * real -> bool
      val <= : real * real -> bool
      val == : real * real -> bool
      val > : real * real -> bool
      val >= : real * real -> bool
      val ?= : real * real -> bool
      val abs : real -> real
      val ceil : real -> int
      val checkFloat : real -> real
      val class : real -> IEEEReal.float_class
      val compare : real * real -> order
      val compareReal : real * real -> IEEEReal.real_order
      val copySign : real * real -> real
      val floor : real -> int
      val fmt : StringCvt.realfmt -> real -> string
      val fromDecimal : {class: IEEEReal.float_class,
                         digits: int list,
                         exp: int,
                         sign: bool}
                          -> real option
      val fromInt : int -> real
      val fromLarge : IEEEReal.rounding_mode -> LargeReal.real -> real
      val fromLargeInt : intInf -> real
      val fromManExp : {exp: int, man: real} -> real
      val fromString : string -> real option
      val isFinite : real -> bool
      val isNan : real -> bool
      val isNormal : real -> bool
      val max : real * real -> real
      val maxFinite : real
      val min : real * real -> real
      val minNormalPos : real
      val minPos : real
      val negInf : real
      val nextAfter : real * real -> real
      val posInf : real
      val precision : int
      val radix : int
      val realCeil : real -> real
      val realFloor : real -> real
      val realMod : real -> real
      val realRound : real -> real
      val realTrunc : real -> real
      val rem : real * real -> real
      val round : real -> int
      val sameSign : real * real -> bool
      val scan : ('a -> (char * 'a) option)
                     -> 'a -> (real * 'a) option
      val sign : real -> int
      val signBit : real -> bool
      val split : real -> {frac: real, whole: real}
      val toDecimal : real
                        -> {class: IEEEReal.float_class,
                            digits: int list,
                            exp: int,
                            sign: bool}
      val toInt : IEEEReal.rounding_mode -> real -> int
      val toLarge : real -> LargeReal.real
      val toLargeInt : IEEEReal.rounding_mode -> real -> intInf
      val toManExp : real -> {exp: int, man: real}
      val toString : real -> string
      val trunc : real -> int
      val unordered : real * real -> bool
      val ~ : real -> real
      structure Math :
      sig
        type real = real
        val acos : real -> real
        val asin : real -> real
        val atan : real -> real
        val atan2 : real * real -> real
        val cos  : real -> real
        val cosh : real -> real
        val e : real
        val exp  : real -> real
        val ln   : real -> real
        val log10 : real -> real
        val pi   : real
        val pow  : real * real -> real
        val sin  : real -> real
        val sinh : real -> real
        val sqrt : real -> real
        val tan  : real -> real
        val tanh : real -> real
      end
    end
  end)
  =
struct
  type rand = S.rand
  type 'a gen = 'a S.gen
  type ('a, 'b) co = ('a, 'b) S.co
  type real = S.Real.Math.real
  val finite : rand -> real * rand
  val frac   : rand -> real * rand
  val neg    : rand -> real * rand
  val nonneg : rand -> real * rand
  val nonpos : rand -> real * rand
  val pos    : rand -> real * rand
  val real   : rand -> real * rand
end

