_require "basis.smi"
_require "GEN_TYPES.sml"
_require "PREGEN_SIG.sml"
_require "PRETEXT_GENERATOR.sml"
_require "TEXT_GENERATOR.sml"
_require "WORD_GENERATOR.sml"

functor GenWord (S :
sig
  (* GEN_TYPES *)
  type rand
  type 'a gen = rand -> 'a * rand
  type ('a, 'b) co = 'a -> 'b gen -> 'b gen
  (* PREGEN_SIG *)
  val new : unit -> rand
  val range : int * int -> rand -> int * rand
  type ('a,'b) reader = 'b -> ('a * 'b) option
  val lift : 'a -> 'a gen
  val select : 'a vector -> 'a gen
  val choose : 'a gen vector -> 'a gen
  val choose' : (int * 'a gen) vector -> 'a gen
  val selectL : 'a list -> 'a gen
  val chooseL : 'a gen list -> 'a gen
  val chooseL' : (int * 'a gen) list -> 'a gen
  val filter : ('a -> bool) -> 'a gen -> 'a gen
  val zip : ('a gen * 'b gen) -> ('a * 'b) gen
  val zip3 : ('a gen * 'b gen * 'c gen) ->
             ('a * 'b * 'c) gen
  val zip4 : ('a gen * 'b gen * 'c gen * 'd gen) ->
             ('a * 'b * 'c * 'd) gen
  val map : ('a -> 'b) -> 'a gen -> 'b gen
  val map2 : ('a * 'b -> 'c) -> ('a gen * 'b gen) ->
             'c gen
  val map3 : ('a * 'b * 'c -> 'd) ->
             ('a gen * 'b gen * 'c gen) -> 'd gen
  val map4 : ('a * 'b * 'c * 'd -> 'e) ->
             ('a gen * 'b gen * 'c gen * 'd gen) ->
             'e gen
  
  val flip : bool gen
  val flip' : int * int -> bool gen
  
  val list : bool gen -> 'a gen -> 'a list gen
  val option : bool gen -> 'a gen -> 'a option gen
  val vector : (int * (int -> 'a) -> 'b) ->
               int gen * 'a gen -> 'b gen
  
  val variant : (int,'b) co
  val variant' : (int * int,'b) co
  val arrow : ('a, 'b) co * 'b gen -> ('a -> 'b) gen
  val cobool : (bool, 'b) co
  val colist : ('a, 'b) co -> ('a list, 'b) co
  val coopt : ('a, 'b) co -> ('a option, 'b) co
  
  type stream
  val start : rand -> stream
  val limit' : int -> 'a gen -> ('a,stream) reader
  val limit : 'a gen -> ('a,stream) reader


  (* TEXT_GENERATOR *)
  type char   = char
  type string = string
  type substring = substring
  val char : char gen
  val charRange : char * char -> char gen
  val charFrom : string -> char gen
  val charByType : (char -> bool) -> char gen
  val string : (int gen * char gen) -> string gen
  val substring : string gen -> substring gen
  val cochar : (char, 'b) co
  val costring : (string, 'b) co
  val cosubstring : (substring, 'b) co
                  
  structure Word :
  sig
    eqtype word
    
    val wordSize : int
    
    val toLarge      : word -> LargeWord.word
    val toLargeX     : word -> LargeWord.word
    val toLargeWord  : word -> LargeWord.word
    val toLargeWordX : word -> LargeWord.word
    val fromLarge     : LargeWord.word -> word
    val fromLargeWord : LargeWord.word -> word
    val toLargeInt  : word -> LargeInt.int
    val toLargeIntX : word -> LargeInt.int
    val fromLargeInt : LargeInt.int -> word
    val toInt  : word -> int
    val toIntX : word -> int
    val fromInt : int -> word
    
    val andb : word * word -> word
    val orb  : word * word -> word
    val xorb : word * word -> word
    val notb : word -> word
    val << : word * Word.word -> word
    val >> : word * Word.word -> word
    val ~>> : word * Word.word -> word
    
    val + : word * word -> word
    val - : word * word -> word
    val * : word * word -> word
    val div : word * word -> word
    val mod : word * word -> word
    
    val compare : word * word -> order
    val <  : word * word -> bool
    val <= : word * word -> bool
    val >  : word * word -> bool
    val >= : word * word -> bool
    
    val ~ : word -> word
    val min : word * word -> word
    val max : word * word -> word
    
    val fmt      : StringCvt.radix -> word -> string
    val toString : word -> string
    val scan       : StringCvt.radix
                       -> (char, 'a) StringCvt.reader
                         -> (word, 'a) StringCvt.reader
    val fromString : string -> word option
  end
end) =
struct
  (* GEN_TYPES *)
  type rand = S.rand
  type 'a gen = 'a S.gen
  type ('a, 'b) co = ('a, 'b) S.co

  (* WORD_GENERATOR *)
  type word = S.Word.word
  val word : word gen
  val coword : (word, 'b) co
end



