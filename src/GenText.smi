_require "basis.smi"
_require "GEN_TYPES.sml"
_require "PREGEN_SIG.sml"
_require "PRETEXT_GENERATOR.sml"

functor GenText (
S : sig
  structure Gen : (* PREGEN_SIG *)
  sig
    (* GEN_TYPES *)
    type rand
    type 'a gen = rand -> 'a * rand
    type ('a, 'b) co = 'a -> 'b gen -> 'b gen
    (* PREGEN_SIG *)
    val new : unit -> rand
    val range : int * int -> rand -> int * rand
    type ('a,'b) reader = 'b -> ('a * 'b) option
    val lift : 'a -> 'a gen
    val select : 'a vector -> 'a gen
    val choose : 'a gen vector -> 'a gen
    val choose' : (int * 'a gen) vector -> 'a gen
    val selectL : 'a list -> 'a gen
    val chooseL : 'a gen list -> 'a gen
    val chooseL' : (int * 'a gen) list -> 'a gen
    val filter : ('a -> bool) -> 'a gen -> 'a gen
    val zip : ('a gen * 'b gen) -> ('a * 'b) gen
    val zip3 : ('a gen * 'b gen * 'c gen) ->
               ('a * 'b * 'c) gen
    val zip4 : ('a gen * 'b gen * 'c gen * 'd gen) ->
               ('a * 'b * 'c * 'd) gen
    val map : ('a -> 'b) -> 'a gen -> 'b gen
    val map2 : ('a * 'b -> 'c) -> ('a gen * 'b gen) ->
               'c gen
    val map3 : ('a * 'b * 'c -> 'd) ->
               ('a gen * 'b gen * 'c gen) -> 'd gen
    val map4 : ('a * 'b * 'c * 'd -> 'e) ->
               ('a gen * 'b gen * 'c gen * 'd gen) ->
               'e gen
    
    val flip : bool gen
    val flip' : int * int -> bool gen
    
    val list : bool gen -> 'a gen -> 'a list gen
    val option : bool gen -> 'a gen -> 'a option gen
    val vector : (int * (int -> 'a) -> 'b) ->
                 int gen * 'a gen -> 'b gen
    
    val variant : (int,'b) co
    val variant' : (int * int,'b) co
    val arrow : ('a, 'b) co * 'b gen -> ('a -> 'b) gen
    val cobool : (bool, 'b) co
    val colist : ('a, 'b) co -> ('a list, 'b) co
    val coopt : ('a, 'b) co -> ('a option, 'b) co
    
    type stream
    val start : rand -> stream
    val limit' : int -> 'a gen -> ('a,stream) reader
    val limit : 'a gen -> ('a,stream) reader
  end
  (* TEXT *)
  structure Text :
  sig
    structure Char : (* CHAR *)
    sig
      eqtype char
      eqtype string
      
      val minChar : char
      val maxChar : char
      val maxOrd : int
      
      val ord : char -> int
      val chr : int -> char
      val succ : char -> char
      val pred : char -> char
      
      val compare : char * char -> order
      val <  : char * char -> bool
      val <= : char * char -> bool
      val >  : char * char -> bool
      val >= : char * char -> bool
      
      val contains : string -> char -> bool
      val notContains : string -> char -> bool
      
      val isAscii : char -> bool
      val toLower : char -> char
      val toUpper : char -> char
      val isAlpha : char -> bool
      val isAlphaNum : char -> bool
      val isCntrl : char -> bool
      val isDigit : char -> bool
      val isGraph : char -> bool
      val isHexDigit : char -> bool
      val isLower : char -> bool
      val isPrint : char -> bool
      val isSpace : char -> bool
      val isPunct : char -> bool
      val isUpper : char -> bool
      
      val toString : char -> String.string
      val scan       : (Char.char, 'a) StringCvt.reader
                         -> (char, 'a) StringCvt.reader
      val fromString : String.string -> char option
      val toCString : char -> String.string
      val fromCString : String.string -> char option
    end
    structure String : (* STRING *)
    sig
      eqtype string
      eqtype char
      val maxSize : int
      val size : string -> int
      val sub : string * int -> char
      val extract   : string * int * int option -> string
      val substring : string * int * int -> string
      val ^ : string * string -> string
      val concat : string list -> string
      val concatWith : string -> string list -> string
      val str : char -> string
      val implode : char list -> string
      val explode : string -> char list
      val map : (char -> char) -> string -> string
      val translate : (char -> string) -> string -> string
      val tokens : (char -> bool) -> string -> string list
      val fields : (char -> bool) -> string -> string list
      val isPrefix    : string -> string -> bool
      val isSubstring : string -> string -> bool
      val isSuffix    : string -> string -> bool
      val compare : string * string -> order
      val collate : (char * char -> order)
                      -> string * string -> order
      val <  : string * string -> bool
      val <= : string * string -> bool
      val >  : string * string -> bool
      val >= : string * string -> bool

      val toString : string -> String.string
      val scan       : (char, 'a) StringCvt.reader
                         -> (string, 'a) StringCvt.reader
      val fromString : String.string -> string option
      val toCString : string -> String.string
      val fromCString : String.string -> string option 
    end
    structure Substring : (* SUBSTRING *)
    sig
      type substring
      eqtype char
      eqtype string

      val sub : substring * int -> char
      val size : substring -> int
      val base : substring -> string * int * int
      val extract   : string * int * int option -> substring
      val substring : string * int * int -> substring
      val full : string -> substring
      val string : substring -> string
      val isEmpty : substring -> bool
      val getc : substring -> (char * substring) option
      val first : substring -> char option
      val triml : int -> substring -> substring
      val trimr : int -> substring -> substring
      val slice : substring * int * int option -> substring
      val concat : substring list -> string
      val concatWith : string -> substring list -> string
      val explode : substring -> char list
      val isPrefix    : string -> substring -> bool
      val isSubstring : string -> substring -> bool
      val isSuffix    : string -> substring -> bool
      val compare : substring * substring -> order
      val collate : (char * char -> order)
                      -> substring * substring -> order
      val splitl : (char -> bool)
                     -> substring -> substring * substring
      val splitr : (char -> bool)
                     -> substring -> substring * substring
      val splitAt : substring * int -> substring * substring
      val dropl : (char -> bool) -> substring -> substring
      val dropr : (char -> bool) -> substring -> substring
      val takel : (char -> bool) -> substring -> substring
      val taker : (char -> bool) -> substring -> substring
      val position : string -> substring -> substring * substring
      val span : substring * substring -> substring
      val translate : (char -> string) -> substring -> string
      val tokens : (char -> bool) -> substring -> substring list
      val fields : (char -> bool) -> substring -> substring list
      val app : (char -> unit) -> substring -> unit
      val foldl : (char * 'a -> 'a) -> 'a -> substring -> 'a
      val foldr : (char * 'a -> 'a) -> 'a -> substring -> 'a 
    end
    structure CharVector : (* MONO_VECTOR *)
    sig
      type vector
      type elem
      val maxLen : int
      val fromList : elem list -> vector
      val tabulate : int * (int -> elem) -> vector
      val length : vector -> int
      val sub : vector * int -> elem
      val update : vector * int * elem -> vector
      val concat : vector list -> vector
      val appi : (int * elem -> unit) -> vector -> unit
      val app  : (elem -> unit) -> vector -> unit
      val mapi : (int * elem -> elem) -> vector -> vector
      val map  : (elem -> elem) -> vector -> vector
      val foldli : (int * elem * 'a -> 'a) -> 'a -> vector -> 'a
      val foldri : (int * elem * 'a -> 'a) -> 'a -> vector -> 'a
      val foldl  : (elem * 'a -> 'a) -> 'a -> vector -> 'a
      val foldr  : (elem * 'a -> 'a) -> 'a -> vector -> 'a
      val findi : (int * elem -> bool)
                    -> vector -> (int * elem) option
      val find  : (elem -> bool) -> vector -> elem option
      val exists : (elem -> bool) -> vector -> bool
      val all : (elem -> bool) -> vector -> bool
      val collate : (elem * elem -> order)
                      -> vector * vector -> order 
    end
    structure CharArray : (* MONO_ARRAY *)
    sig
      eqtype array
      type elem
      type vector
      val maxLen : int
      val array : int * elem -> array
      val fromList : elem list -> array
      val tabulate : int * (int -> elem) -> array
      val length : array -> int
      val sub : array * int -> elem
      val update : array * int * elem -> unit
      val vector : array -> vector
      val copy    : {src : array, dst : array, di : int} -> unit
      val copyVec : {src : vector, dst : array, di : int} -> unit

      val appi : (int * elem -> unit) -> array -> unit
      val app  : (elem -> unit) -> array -> unit
      val modifyi : (int * elem -> elem) -> array -> unit
      val modify  : (elem -> elem) -> array -> unit
      val foldli : (int * elem * 'b -> 'b) -> 'b -> array -> 'b
      val foldri : (int * elem * 'b -> 'b) -> 'b -> array -> 'b
      val foldl  : (elem * 'b -> 'b) -> 'b -> array -> 'b
      val foldr  : (elem * 'b -> 'b) -> 'b -> array -> 'b
      val findi : (int * elem -> bool)
                    -> array -> (int * elem) option
      val find  : (elem -> bool) -> array -> elem option
      val exists : (elem -> bool) -> array -> bool
      val all : (elem -> bool) -> array -> bool
      val collate : (elem * elem -> order)
                      -> array * array -> order 
    end
    structure CharVectorSlice : (* MONO_VECTOR_SLICE *)
    sig
      type elem
      type vector
      type slice
      val length : slice -> int
      val sub : slice * int -> elem
      val full : vector -> slice
      val slice : vector * int * int option -> slice
      val subslice : slice * int * int option -> slice
      val base : slice -> vector * int * int
      val vector : slice -> vector
      val concat : slice list -> vector
      val isEmpty : slice -> bool
      val getItem : slice -> (elem * slice) option
      val appi : (int * elem -> unit) -> slice -> unit
      val app  : (elem -> unit) -> slice -> unit
      val mapi : (int * elem -> elem) -> slice -> vector
      val map  : (elem -> elem) -> slice -> vector
      val foldli : (int * elem * 'b -> 'b) -> 'b -> slice -> 'b
      val foldr  : (elem * 'b -> 'b) -> 'b -> slice -> 'b
      val foldl  : (elem * 'b -> 'b) -> 'b -> slice -> 'b
      val foldri : (int * elem * 'b -> 'b) -> 'b -> slice -> 'b
      val findi : (int * elem -> bool)
                    -> slice -> (int * elem) option
      val find  : (elem -> bool) -> slice -> elem option
      val exists : (elem -> bool) -> slice -> bool
      val all : (elem -> bool) -> slice -> bool
      val collate : (elem * elem -> order)
                      -> slice * slice -> order
    end
    structure CharArraySlice : (* MONO_ARRAY_SLICE *)
    sig
      type elem
      type array
      type slice
      type vector
      type vector_slice
      val length : slice -> int
      val sub : slice * int -> elem
      val update : slice * int * elem -> unit
      val full : array -> slice
      val slice : array * int * int option -> slice
      val subslice : slice * int * int option -> slice
      val base : slice -> array * int * int
      val vector : slice -> vector
      val copy    : {src : slice, dst : array, di : int} -> unit
      val copyVec : {src : vector_slice, dst : array, di : int}
                      -> unit
      val isEmpty : slice -> bool
      val getItem : slice -> (elem * slice) option
      val appi : (int * elem -> unit) -> slice -> unit
      val app  : (elem -> unit) -> slice -> unit
      val modifyi : (int * elem -> elem) -> slice -> unit
      val modify  : (elem -> elem) -> slice -> unit
      val foldli : (int * elem * 'b -> 'b) -> 'b -> slice -> 'b
      val foldr  : (elem * 'b -> 'b) -> 'b -> slice -> 'b
      val foldl  : (elem * 'b -> 'b) -> 'b -> slice -> 'b
      val foldri : (int * elem * 'b -> 'b) -> 'b -> slice -> 'b
      val findi : (int * elem -> bool)
                    -> slice -> (int * elem) option
      val find  : (elem -> bool) -> slice -> elem option
      val exists : (elem -> bool) -> slice -> bool
      val all : (elem -> bool) -> slice -> bool
      val collate : (elem * elem -> order)
                      -> slice * slice -> order
    end
    sharing type Char.char = String.char = Substring.char
      = CharVector.elem = CharArray.elem
      = CharVectorSlice.elem = CharArraySlice.elem
    sharing type Char.string = String.string = Substring.string
      = CharVector.vector = CharArray.vector
      = CharVectorSlice.vector = CharArraySlice.vector
    sharing type CharArray.array = CharArraySlice.array
    sharing type CharVectorSlice.slice = CharArraySlice.vector_slice
  end
end) =
struct
  (* GEN_TYPES *)
  type rand = S.Gen.rand
  type 'a gen = 'a S.Gen.gen
  type ('a, 'b) co = ('a,'b) S.Gen.co
  (* PREGEN_SIG *)
  val new : unit -> rand
  val range : int * int -> rand -> int * rand
  type ('a,'b) reader = ('a,'b) S.Gen.reader
  val lift : 'a -> 'a gen
  val select : 'a vector -> 'a gen
  val choose : 'a gen vector -> 'a gen
  val choose' : (int * 'a gen) vector -> 'a gen
  val selectL : 'a list -> 'a gen
  val chooseL : 'a gen list -> 'a gen
  val chooseL' : (int * 'a gen) list -> 'a gen
  val filter : ('a -> bool) -> 'a gen -> 'a gen
  val zip : ('a gen * 'b gen) -> ('a * 'b) gen
  val zip3 : ('a gen * 'b gen * 'c gen) ->
             ('a * 'b * 'c) gen
  val zip4 : ('a gen * 'b gen * 'c gen * 'd gen) ->
             ('a * 'b * 'c * 'd) gen
  val map : ('a -> 'b) -> 'a gen -> 'b gen
  val map2 : ('a * 'b -> 'c) -> ('a gen * 'b gen) ->
             'c gen
  val map3 : ('a * 'b * 'c -> 'd) ->
             ('a gen * 'b gen * 'c gen) -> 'd gen
  val map4 : ('a * 'b * 'c * 'd -> 'e) ->
             ('a gen * 'b gen * 'c gen * 'd gen) ->
             'e gen
  
  val flip : bool gen
  val flip' : int * int -> bool gen
  
  val list : bool gen -> 'a gen -> 'a list gen
  val option : bool gen -> 'a gen -> 'a option gen
  val vector : (int * (int -> 'a) -> 'b) ->
               int gen * 'a gen -> 'b gen
  val variant : (int,'b) co
  val variant' : (int * int,'b) co
  val arrow : ('a, 'b) co * 'b gen -> ('a -> 'b) gen
  val cobool : (bool, 'b) co
  val colist : ('a, 'b) co -> ('a list, 'b) co
  val coopt : ('a, 'b) co -> ('a option, 'b) co
  
  type stream (= S.Gen.stream)
  val start : rand -> stream
  val limit' : int -> 'a gen -> ('a,stream) reader
  val limit : 'a gen -> ('a,stream) reader

  (* PRETEXT_GENERATOR *)
  type char      = S.Text.Char.char
  type string    = S.Text.String.string
  type substring = S.Text.Substring.substring
  val char : char gen
  val charRange : char * char -> char gen
  val charFrom : string -> char gen
  val charByType : (char -> bool) -> char gen
  val string : (int gen * char gen) -> string gen
  val substring : string gen -> substring gen
  val cochar : (char, 'b) co
  val costring : (string, 'b) co
  val cosubstring : (substring, 'b) co
end

